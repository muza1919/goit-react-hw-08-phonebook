{"version":3,"file":"static/js/223.46572a68.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/Contactform.jsx","components/ContactListItem/ContactListItem.styled.js","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/ContactsPage.styled.js","pages/ContactsPage.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import styled from 'styled-components';\nimport { ErrorMessage as FormikError } from 'formik';\n\nexport const SubmitBtn = styled.button`\n  display: block;\n`;\n\nexport const Label = styled.label`\n  display: block;\n  margin-bottom: 30px;\n`;\n\nexport const LabelSpan = styled.span`\n  display: block;\n  font-size: 22px;\n`;\n\nexport const Form = styled.form`\n  width: 300px;\n  border: 1px solid black;\n  padding: 10px;\n`;\n\nexport const ErrorMessage = styled(FormikError)`\n  color: tomato;\n`;\n","import {\n  SubmitBtn,\n  Label,\n  LabelSpan,\n  ErrorMessage,\n} from './ContactForm.styled';\nimport { Notify } from 'notiflix';\nimport { Formik, Form, Field } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nconst initialValues = { name: '', number: '' };\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, {\n      message:\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n      excludeEmptyString: true,\n    })\n    .required('Required'),\n  number: yup\n    .string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      {\n        message:\n          'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n        excludeEmptyString: true,\n      }\n    )\n    .required('Required'),\n});\n\nfunction ContactForm() {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, number } = values;\n\n    const findContact = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (findContact) {\n      Notify.failure(`${name} is already in contact`);\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <Label>\n          <LabelSpan>Name</LabelSpan>\n          <Field\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Enter name\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          ></Field>\n          <ErrorMessage name=\"name\" component=\"div\" />\n        </Label>\n        <Label>\n          <LabelSpan>Number</LabelSpan>\n          <Field\n            type=\"tel\"\n            name=\"number\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          ></Field>\n          <ErrorMessage name=\"number\" component=\"div\" />\n        </Label>\n        <SubmitBtn type=\"submit\">Add contact</SubmitBtn>\n      </Form>\n    </Formik>\n  );\n}\n\nexport default ContactForm;\n","import styled from 'styled-components';\nimport { colors } from '../../utils/constants';\n\nexport const Contact = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 600px;\n  font-size: 22px;\n  :not(:last-child) {\n    margin-bottom: 10px;\n  }\n  :nth-child(2n) {\n    background-color: ${colors.backgroundAccent};\n  }\n`;\n\nexport const Button = styled.button`\n  margin-left: 20px;\n  border: 0px;\n  background-color: transparent;\n`;\n\nexport const ItemImage = styled.img`\n  height: 40px;\n  border-radius: 50%;\n`;\n","import PropTypes from 'prop-types';\nimport { Contact, Button, ItemImage } from './ContactListItem.styled';\nimport DeleteButton from './TrashCan.png';\n\nconst ContactListItem = ({ name, number, onDeleteContact, id }) => {\n  return (\n    <Contact>\n      <div>\n        <span>{name}</span>: <span>{number}</span>\n      </div>\n      <Button\n        type=\"button\"\n        onClick={() => {\n          onDeleteContact(id);\n        }}\n      >\n        <ItemImage src={DeleteButton} />\n      </Button>\n    </Contact>\n  );\n};\n\nContactListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nexport default ContactListItem;\n","import styled from 'styled-components';\n\nexport const ContactListElement = styled.ul`\n  width: 60%;\n  padding: 0;\n`;\n","import ContactListItem from '../ContactListItem';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { ContactListElement } from './ContactList.styled';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = idForDelete => {\n    dispatch(deleteContact(idForDelete));\n  };\n\n  return (\n    <ContactListElement>\n      {contacts.map(({ id, name, number }) => {\n        return (\n          <ContactListItem\n            key={id}\n            name={name}\n            number={number}\n            onDeleteContact={() => {\n              handleDeleteContact(id);\n            }}\n            id={id}\n          />\n        );\n      })}\n    </ContactListElement>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const FilterInput = styled.input`\n  margin-left: 10px;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { FilterInput } from './Filter.styled';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const handleFilterChange = e => {\n    dispatch(setFilter(e.currentTarget.value));\n  };\n\n  return (\n    <label>\n      Find contacts by name\n      <FilterInput\n        type=\"text\"\n        value={filter}\n        name=\"filter\"\n        onChange={e => {\n          handleFilterChange(e);\n        }}\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  padding: 10px 50px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\n\nimport ContactForm from '../components/ContactForm';\nimport ContactList from '../components/ContactList';\nimport Filter from '../components/Filter';\nimport { Section } from './ContactsPage.styled';\n\nexport function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Section>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n\n      <ContactList />\n      {isLoading && !error && (\n        <p>\n          <b>Request in progress...</b>\n        </p>\n      )}\n    </Section>\n  );\n}\n\nexport default ContactsPage;\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectError","error","selectIsLoading","isLoading","selectVisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","SubmitBtn","styled","Label","LabelSpan","ErrorMessage","FormikError","initialValues","number","schema","yup","shape","matches","message","excludeEmptyString","required","useSelector","dispatch","useDispatch","validationSchema","onSubmit","values","resetForm","find","Notify","addContact","type","placeholder","title","component","Contact","colors","Button","ItemImage","onDeleteContact","id","onClick","src","DeleteButton","ContactListElement","map","idForDelete","deleteContact","FilterInput","value","onChange","e","setFilter","currentTarget","handleFilterChange","Section","ContactsPage","useEffect","fetchContacts"],"sourceRoot":""}